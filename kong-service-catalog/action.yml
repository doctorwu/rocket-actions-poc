name: 'Kong Service Catalog Entry Creator'
description: 'This action creates a service catalog entry in Kong Konnect.'
inputs:
  konnect_token:  # id of input
    description: 'Konnect API token for authentication'
    required: true
  service_template:
    description: 'Template to use for the service catalog entry'
    required: true
  documentation_data:
    description: 'Path to the documentation data file'
    required: true
  documentation_template:
    description: 'Template for the documentation to be attached'
    required: true
  openapi_spec:
    description: 'Path to the OpenAPI specification file'
    required: true
  github_openapi_resource:
    description: 'GitHub resource for the OpenAPI specification'
    required: true
  control_plane_name:
    description: 'Name of the control plane to associate with the service'
    required: true
  service_name:
    description: 'Name of the service to be created in the service catalog'
    required: true
  analytics_resource_name:
    description: 'Name of the analytics resource to be associated with the service'
    required: false
  deck_plugins_file:
    description: 'Path to the deck plugins file'
    required: false
  deck_select_tag:
    description: 'Tag to select for the deck command'
    required: false
  deck_consumers_file:
    description: 'Path to the consumers file'
    required: false
  deck_patch_file:
    description: 'Path to the deck patch file'
    required: false
runs:
  using: "composite"
  steps:
  - name: Configure demo Konnect Control Plane
    shell: bash
    run: |
        cat ${{ inputs.openapi_spec }} | \
        deck file openapi2kong --select-tag ${{ inputs.deck_select_tag }} -i | \
        deck file add-plugins ${{ inputs.deck_plugins_file }} > /tmp/kong.yaml
        deck file merge ${{ inputs.deck_consumers_file }} /tmp/kong.yaml | \
        deck --konnect-token ${{ inputs.konnect_token }} --konnect-control-plane-name demo --select-tag ${{ inputs.deck_select_tag }} gateway sync
        sleep 10 # Wait for the sync to complete
  - name: Create Service Catalog Entry
    shell: bash
    id: create_service
    run: |
      payload=`http POST $BASE_SERVICE_HUB_URL/services Authorization:"Bearer ${{ inputs.konnect_token }}" < ${{ inputs.service_template }}`
      echo "service_id=$(echo $payload | jq -r '.id')" >> $GITHUB_OUTPUT

  - name: Attach Documentation to Service
    shell: bash
    run: |
      export raw_content=`cat ${{ inputs.documentation_data }} | base64 -w0` ; cat ${{ inputs.documentation_template }} | envsubst '$raw_content' > /tmp/documentation.json
      http POST "$BASE_SERVICE_HUB_URL/services/${{ steps.create_service.outputs.service_id }}/documents" Authorization:"Bearer ${{ inputs.konnect_token }}" < /tmp/documentation.json

  - name: Set Required Service Catalog GitHub Integration IDs
    shell: bash
    id: github_integration_id
    run: |
      payload=`http GET "$BASE_SERVICE_HUB_URL/resources?filter%5Barchived%5D=false&filter%5Bintegration.name%5D%5Beq%5D=github" Authorization:"Bearer ${{ inputs.konnect_token }}"`
      echo "integration_instance_id=$(echo $payload | jq -r '.data[0].integration.instance.id')" >> $GITHUB_OUTPUT
      echo "integration_resource_id=$(echo $payload | jq -r '.data[0].id')" >> $GITHUB_OUTPUT

  - name: Add API Specification to Service Catalog Entry
    shell: bash
    run: |
      export INTEGRATION_INSTANCE_ID=${{ steps.github_integration_id.outputs.integration_instance_id }}
      cat ${{ inputs.github_openapi_resource }} | envsubst '$INTEGRATION_INSTANCE_ID' > /tmp/spec.json
      http POST "$BASE_SERVICE_HUB_URL/services/${{ steps.create_service.outputs.service_id }}/api-specs" Authorization:"Bearer ${{ inputs.konnect_token }}" < /tmp/spec.json

  - name: Map GitHub Integration to Service Catalog Entry
    shell: bash
    run: |
      http --ignore-stdin POST "$BASE_SERVICE_HUB_URL/resource-mappings" Authorization:"Bearer ${{ inputs.konnect_token }}" resource="${{ steps.github_integration_id.outputs.integration_resource_id }}" service="${{ steps.create_service.outputs.service_id }}"

  - name: Get Control Plane id
    shell: bash
    id: control_plane_id
    run: |
      payload=`http GET "https://us.api.konghq.com/v2/control-planes?filter[name][eq]=${{ inputs.control_plane_name }}" Authorization:"Bearer ${{ inputs.konnect_token }}"`
      echo "control_plane_id=$(echo $payload | jq -r '.data[0].id')" >> $GITHUB_OUTPUT

  - name: Output HTTPBin service id
    shell: bash
    id: httpbin_service_id
    run: |
      payload=`http GET "$BASE_SERVICE_HUB_URL/resources?resources?filter%5Barchived%5D=false&filter%5Bintegration.name%5D%5Beq%5D=gateway-manager&filter[name][eq]=${{ inputs.service_name }}" Authorization:"Bearer ${{ inputs.konnect_token }}"`
      echo "httpbin_service_id=$(echo $payload | jq -r '.data[0].id')" >> $GITHUB_OUTPUT

  - name: Map Gateway Service to Service Catalog Entry
    shell: bash
    run: |
      http --ignore-stdin POST "$BASE_SERVICE_HUB_URL/resource-mappings" Authorization:"Bearer ${{ inputs.konnect_token }}" resource="${{ steps.httpbin_service_id.outputs.httpbin_service_id }}" service="${{ steps.create_service.outputs.service_id }}"

  - name: Get Analytics Resource ID
    shell: bash
    id: analytics_resource
    if: ${{ inputs.analytics_resource_name != '' }}
    run: |
      payload=`http GET "$BASE_SERVICE_HUB_URL/resources?resources?filter%5Barchived%5D=false&filter%5Bintegration.name%5D%5Beq%5D=analytics&filter[name][eq]=${{ inputs.analytics_resource_name }}" Authorization:"Bearer ${{ inputs.konnect_token }}"`
      echo "analytics_resource_id=$(echo $payload | jq -r '.data[0].id')" >> $GITHUB_OUTPUT

  - name: Map Analytics Resource to Service Catalog Entry
    shell: bash
    run: |
      http --ignore-stdin POST "$BASE_SERVICE_HUB_URL/resource-mappings" Authorization:"Bearer ${{ inputs.konnect_token }}" resource="${{ steps.analytics_resource.outputs.analytics_resource_id }}" service="${{ steps.create_service.outputs.service_id }}"
